@page "/genre/delete/{GenreId:int}"
@using BookTracker.Shared.Models.Genre
@inject HttpClient http
@inject NavigationManager navigation
@attribute [Authorize]

<h3>Genre @genre.Id </h3>

@if (genre != null)
{
    <div class="container">
        <dl class="row">
         <dt class = "col-sm-2">
            <span>Genre Id:</span>
        </dt>
        <dd class = "col-sm-10">
            <span>@genre.Id</span>
        </dd>
        <dt class = "col-sm-2">
            <span>Name:</span>
        </dt>
        <dd class = "col-sm-10">
            <span>@genre.Name</span>
        </dd>
            
        </dl>

       <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <p>Are you sure you want to delete Genre @genre.Name?</p>
                <a href="#" @onclick="HandleClick" class="btn btn-danger text-white">Delete Genre</a>
                <a href=@($"/genre") class="btn btn-outline-primary">Back to Genre Index</a>
            </div>
        </div>


    </div>

}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int GenreId { get; set; }

    private GenreDetail genre = new();

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        genre = await http.GetFromJsonAsync<GenreDetail>($"/api/genre/{GenreId}");


    }

    private async void HandleClick()
    {
        var deleteResult = await http.DeleteAsync($"/api/genre/delete/{GenreId}");

        if(deleteResult.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/genre");
        }
        else
        {
            errorMessage = "Failed to delete genre at this time.";
        }
    }

}
