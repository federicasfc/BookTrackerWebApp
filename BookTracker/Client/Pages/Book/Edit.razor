@page "/book/edit/{BookId:int}"
@using BookTracker.Shared.Models.Book
@using BookTracker.Shared.Models.Genre
@inject HttpClient http
@inject NavigationManager navigation
@attribute [Authorize]

<h3>Edit Book: @model.Title</h3>


@if (errorMessage is null)
{
    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Title</label>
                <InputText class="form-control" @bind-Value="model.Title" />
            </div>
            <div class="form-group">
                <label>Author</label>
                <InputText class="form-control" @bind-Value="model.Author" />
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputTextArea class="form-control" @bind-Value="model.Description" />
            </div>
            <div class="form-group">
                <h4>Genres</h4>
                @* Need some type of logic to show if genres already exist in model.Genres and are checked; right now this will just display all genres with empty checks regardless of whether or not they are in model.Genres*@
                @foreach (GenreListItem genre in genres)
                {
                    //Doing the same logic as if below, but directly utilizing checked input property by setting it equal to either true or false
                    //bool is checking whether or not model.Genres contains a genre with an id that matches the id of 
                    bool isChecked = model.Genres.Any(g => g.Id == genre.Id);

                    <label for="@genre.Id">@genre.Name </label>
                    <input type="checkbox" class="form-control" id="@genre.Id" @onchange="eventArgs => {CheckboxClicked(genre, eventArgs.Value); }" checked="@isChecked"/>

                   @* @if (model.Genres.Any(g => g.Id == genre.Id))
                    {
                        <input type="checkbox" class="form-control" id="@genre.Id" @onchange="eventArgs => {CheckboxClicked(genre, eventArgs.Value); }" checked />
                       
                        Source for possible solution: https://blazor-tutorial.net/knowledge-base/51234654/-net-core-blazor--how-to-get-the-checkbox-value-if-it-is-checked-


                    }
                    else
                    {
                        <label for="@genre.Id">@genre.Name </label>
                        <input type="checkbox" class="form-control" id="@genre.Id" @onchange="eventArgs => {CheckboxClicked(genre, eventArgs.Value); }" />
                        


                    }
                    *@
                }
            </div>



            <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>


        </EditForm>

    </div>


}

else
{
    <h5 class="text-danger">@errorMessage</h5>
}


@code {

    [Parameter]
    public int BookId { get; set; }

    private BookUpdate model = new();

    private List<GenreListItem> genres = new();

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {

        model = await http.GetFromJsonAsync<BookUpdate>($"/api/book/{BookId}");

        genres = await http.GetFromJsonAsync<List<GenreListItem>>("/api/genre");

    }

    private async void HandleSubmit()
    {
        var editResult = await http.PutAsJsonAsync<BookUpdate>($"/api/book/edit/{BookId}", model);

        if (editResult.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/book/{BookId}");
        }
        else
        {
            errorMessage = "Could not edit book at this time. Please try again later.";
        }
    }


    private void CheckboxClicked(GenreListItem genre, object checkedValue)
    {
        //If checked and model doesn't have genre, add it
        if ((bool)checkedValue)
        {

            if (!model.Genres.Any(g => g.Id == genre.Id))
            {
                model.Genres.Add(genre);

            }


        }
        //if not checked and model already has it, remove it
        else
        {
            if (model.Genres.Any(g => g.Id == genre.Id))
            {
                var genreToRemove = model.Genres.FirstOrDefault(g => g.Id == genre.Id);

                model.Genres.Remove(genreToRemove);

            }
        }
    }




}

@*As added functionality in future, make it so that the list of Genres associated to book can be edited as well...maybe
    Would require:
    -Adding List<GenreListItem> genres to BookUpdate
    -Adding field List<GenreListItem> genres in code block here
    -Adding InputSelection of some sort
    -OnInitializedAsync that gets list of genres

*@
            @*<!--
    After some genres are created:
    <InputSelect class="form-control" @bind-Value="model.Genres"
    @foreach (GenreListItem genre in genres)
    {
    <option> @genre.Name</option>
    }
    </InputSelect>

    <InputCheckbox class="form-control" @bind-Value="model.Genres"> @*Won't let me use this because of list probably?? May need a foreach, but I'm not sure where*@
                  @* Original code under Label
    @foreach (GenreListItem genre in genres)
    {
    <option value="@genre.Id">@genre.Name</option>
    }
    </InputCheckbox>

                  *@

