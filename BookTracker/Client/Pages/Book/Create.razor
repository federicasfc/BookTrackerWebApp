@page "/book/create"
@using BookTracker.Shared.Models.Book
@using BookTracker.Shared.Models.Genre
@inject HttpClient http
@inject NavigationManager navigation
@attribute [Authorize]

<h3>Create a Book</h3>

@if (errorMessage is null)
{
    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Title</label>
                <InputText class="form-control" @bind-Value="model.Title" />
            </div>
            <div class="form-group">
                <label>Author</label>
                <InputText class="form-control" @bind-Value="model.Author" />
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputTextArea class="form-control" @bind-Value="model.Description" />
            </div>

            <div class="form-group">
                <label>Genres</label>
                @foreach (GenreListItem genre in genres)
                {
                    <input type="checkbox" class="form-control" @onchange="eventArgs => {CheckboxClicked(genre, eventArgs.Value); }" />
                    <p>@genre.Name</p>
                }
            </div>

            <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>


        </EditForm>

    </div>


}
else
{
    <h5 class="text-danger">@errorMessage</h5>
}

@code {

    private BookCreate model = new();

    private List<GenreListItem> genres = new();

    private string errorMessage;

    
     protected override async Task OnInitializedAsync()
      {
           genres = await http.GetFromJsonAsync<List<GenreListItem>>("/api/genre/");
      }
     

    private async void HandleSubmit()
    {
        var createResult = await http.PostAsJsonAsync<BookCreate>("/api/book/create", model);

        if (createResult.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/book");

        }
        else
        {
            errorMessage = "Could not create book at this time. Please try again later.";

        }

    }
    private  void CheckboxClicked(GenreListItem genre, object checkedValue)
    {
        //If checked and model doesn't have genre, add it
        if ((bool)checkedValue)
        {

            if (!model.Genres.Contains(genre))
            {
                model.Genres.Add(genre);

            }


        }
        //if not checked and model already has it, remove it
        else
        {
            if (model.Genres.Contains(genre))
            {
                model.Genres.Remove(genre);
            }
        }

    }
    }
   
     @*Source for possible solution for genre checkbox function: https://blazor-tutorial.net/knowledge-base/51234654/-net-core-blazor--how-to-get-the-checkbox-value-if-it-is-checked-*@