@page "/acquiredlist/add"
@using BookTracker.Shared.Models.List
@using BookTracker.Shared.Models.List.AcquiredList
@using BookTracker.Shared.Models.Book
@inject HttpClient http
@inject NavigationManager navigation
@attribute [Authorize]

<h3>Add a Book to Acquired List</h3>

@if (errorMessage is null)
{
    if(books == null)
    {
        <p>Loading...</p>
    }
    else
    {

    <div class="container">
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
              <div class="form-group">
                <label>Book</label>
                <InputSelect class="form-control" @bind-Value="model.BookId">
                    @foreach (BookListItem book in books)
                    {
                    <option value="@book.Id">@book.Title</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Date Acquired:</label>
                <InputDate class="form-control" @bind-Value="model.AcquiredUtc" />

            </div>
            <div class="form-group">
                <label>Format</label>
                <InputSelect class="form-control" @bind-Value="model.Format">
                    @foreach(var format in Enum.GetValues(typeof(Format)))
                    {
                        <option value="@format">@format</option>
                        }
                    </InputSelect>
            </div>
            <div class="form-group">
                <label>How did you get this book?</label>
                <InputTextArea class="form-control" @bind-Value="model.HowAcquired" />
            </div>

            <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>


        </EditForm>

    </div>
    }


}
else
{
    <h5 class="text-danger">@errorMessage</h5>
}

@code {

    private AcquiredListCreate model = new();

    private List<BookListItem> books;

    private string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        books = await http.GetFromJsonAsync<List<BookListItem>>("/api/book/");
    }


    private async void HandleSubmit()
    {
        var createResult = await http.PostAsJsonAsync<AcquiredListCreate>("/api/acquiredlist/add", model);

        if (createResult.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/acquiredlist");

        }
        else
        {
            errorMessage = "Could not add book at this time. Please try again later.";

        }

    }

    }
